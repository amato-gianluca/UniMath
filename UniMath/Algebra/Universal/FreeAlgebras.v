(** * Variables and free algebras. *)

(**
   This file contains a formalization of terms with variables and the free algebra generated by
   an infinite set of variables, together with the corresponding universal mapping property.
 *)

Require Import UniMath.Foundations.All.
Require Import UniMath.Combinatorics.Vectors.
Require Import UniMath.Algebra.Universal.Signatures.
Require Import UniMath.Algebra.Universal.Terms.
Require Import UniMath.Algebra.Universal.Algebras.

Local Open Scope hom.

Section Variables.

  Definition vsignature (sigma : signature) : signature
    := setcoprod (names sigma) natset,,
                 sumofmaps (@arity sigma) (λ _, 0).

  Definition vterm (sigma: signature) := term (vsignature sigma).

  Context {sigma : signature}.

  Definition namelift (nm: names sigma): names (vsignature sigma) := inl nm.

  Definition varname (n: nat): names (vsignature sigma) := inr n.

  Definition var (n : nat) : vterm sigma := build_term_curried (varname n).

  Definition fromvterm {A:UU}
             (op : (∏ (nm : names sigma), Vector A (arity nm) → A))
             (α : nat → A)
    : vterm sigma → A.
  Proof.
    refine (@fromterm (vsignature sigma) A _).
    induction nm as [nm | nm].
    - exact (op nm).
    - exact (λ rec, α nm).
  Defined.

  Lemma fromvtermstep {A: UU}
                      (nm: names sigma)
                      (op : (∏ (nm : names sigma), Vector A (arity nm) → A))
                      (α : nat → A)
                      (v: Vector (term (vsignature sigma)) (arity nm))
    : fromvterm op α (build_term (namelift nm) v) = op nm (vector_map (fromvterm op α) v).
  Proof.
    unfold fromvterm, fromterm.
    rewrite term_ind_step.
    rewrite vector_map_as_mk_vector.
    apply idpath.
  Defined.

End Variables.

Section FreeAlgebras.

  Definition free_algebra (sigma: signature): algebra sigma :=
    make_algebra (termset (vsignature sigma)) (λ nm: names sigma, build_term (namelift nm)).

  Context {sigma: signature}.

  Definition veval (a : algebra sigma) (f: nat → support a): free_algebra sigma → support a
    := fromvterm (op a) f.

  Lemma vevalstep {a: algebra sigma} (f: nat → support a) (nm: names sigma) (v: Vector (vterm sigma) (arity nm))
    : veval a f (build_term (namelift nm) v) = op a nm (vector_map (veval a f) v).
  Proof.
    unfold veval.
    apply fromvtermstep.
  Defined.

  Lemma ishomveval (a: algebra sigma) (f: nat → support a): ishom (veval a f).
  Proof.
    red.
    intros.
    apply vevalstep.
  Defined.

  Definition vevalhom (a: algebra sigma) (f: nat → support a): free_algebra sigma ↦ a
    := make_hom (ishomveval a f).

  Definition universalmap {a: algebra sigma} (f: nat → a)
    : ∑ h: free_algebra sigma ↦ a, ∏ n: nat, h (var n) = f n.
  Proof.
    exists (vevalhom a f).
    intro n.
    apply idpath.
  Defined.

  Definition iscontr_universalmap {a: algebra sigma} (f: nat → a)
    : iscontr (∑ h: free_algebra sigma ↦ a, ∏ n: nat, h (var n) = f n).
  Proof.
    exists (universalmap f).
    intro h.
    induction h as [h hvar].
    apply subtypePairEquality'.
    - apply subtypePairEquality'.
      2: apply isapropishom.
      apply funextfun.
      unfold homot.
      apply term_ind.
      unfold term_ind_HP.
      intros.
      induction nm as [nm | var].
      * change (inl nm) with (namelift nm).
        change (build_term (namelift nm) v) with (op (free_algebra sigma) nm v) at 1.
        rewrite (hom2axiom h).
        rewrite vevalstep.
        apply maponpaths.
        apply vector_extens.
        intros.
        do 2 rewrite el_vector_map.
        rewrite IH.
        apply idpath.
     * apply hvar.
   - apply impred_isaprop.
     intros.
     apply (support a).
  Defined.

End FreeAlgebras.
